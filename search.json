[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "macros.html",
    "href": "macros.html",
    "title": "",
    "section": "",
    "text": "\\[\n\\newcommand{\\trans}{^\\mathsf{T}}\n\\newcommand{\\eps}{\\epsilon}\n\\]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data 100: Principles and Techniques of Data Science",
    "section": "",
    "text": "Note: DS100/fa23 has a div with templating for the instructors."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Data 100: Principles and Techniques of Data Science",
    "section": "Schedule",
    "text": "Schedule\nNote: DS100 uses templating to fill out the schedule. Here we use Quarto’s EJS templating.\nWe’d like to be able to define custom html classes for the buttons below (presumably in CSS style file)\n\nA templated schedule\nThe templating is basically working in terms of filling in values in the schedule.ejs file based on a schedule.yml file. I’m not sure how to apply the style for the module class (see styles.css) to mimic the styling in the DS100 page.\n\nWeek 1\n\n\n      Aug 24:\n    \n        \n    Lecture 1 Introduction\n        \n        Note 1\n        \n\n    \n    Lecture participation 1 Lecture Participation 1\n\n      Aug 25:\n    \n    Lab 1 Prerequisite Coding (due Aug 29)\n\n    \n    Homework 1A Plotting and Permutation Test (due Aug 31)\n\n    \n    Homework 1B Prerequisite Math (due Aug 31)\n\n   \n   \nWeek 2\n\n\n      Aug 29:\n    \n    Lecture 1 Pandas 1\n\n    \n    Lecture participation 1 Lecture Participation 2\n\n   \n   \n\nNo matching items\n\n\n\n\nA manual schedule\nWeek 1\n\n\n\nAug 24:\nLecture 1 Introduction\nNote 1, Note 2, Recording\n\n\n\nLecture Participation 1 Lecture Participation 1\n\n\n\nAug 25:\nLab 1 Prereq coding"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Jump to:"
  },
  {
    "objectID": "syllabus.html#about-data-100",
    "href": "syllabus.html#about-data-100",
    "title": "Syllabus",
    "section": "About Data 100",
    "text": "About Data 100\nCombining data, computation, and inferential thinking, data science is redefining how people and organizations solve challenging problems and understand their world. This intermediate level class bridges between Data 8 and upper division computer science and statistics courses as well as methods courses in other fields. In this class, we explore key areas of data science including question formulation, data collection and cleaning, visualization, statistical inference, predictive modeling, and decision making.​ Through a strong emphasis on data centric computing, quantitative critical thinking, and exploratory data analysis, this class covers key principles and techniques of data science. These include languages for transforming, querying and analyzing data; algorithms for machine learning methods including regression, classification and clustering; principles behind creating informative data visualizations; statistical concepts of measurement error and prediction; and techniques for scalable data processing.\n\nGoals\n\nPrepare students for advanced Berkeley courses in data-management, machine learning, and statistics, by providing the necessary foundation and context.\nEnable students to start careers as data scientists by providing experience working with real-world data, tools, and techniques.\nEmpower students to apply computational and inferential thinking to address real-world problems.\n\n\n\nPrerequisites\nWhile we are working to make this class widely accessible, we currently require the following (or equivalent) prerequisites. Prerequisites will be enforced in Data 100. It is your responsibility to know the material in the prerequisites."
  },
  {
    "objectID": "unit2.html",
    "href": "unit2.html",
    "title": "Unit 2: next",
    "section": "",
    "text": "This is an example of using an ipynb file as source rather than qmd. It follows instructions from https://github.com/DS-100/course-notes/README.md."
  },
  {
    "objectID": "unit2.html#title",
    "href": "unit2.html#title",
    "title": "Unit 2: next",
    "section": "Title",
    "text": "Title\nHere is some \\(\\LaTeX\\). \\[\n\\theta = 7\n\\]\nHere is some code. Note that to get code output shown, the underlying notebook must have executed the code.\n\n\nCode\na=7\nprint(a)\n\n\n7\n\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title."
  },
  {
    "objectID": "unit1.html",
    "href": "unit1.html",
    "title": "Unit 1: Intro",
    "section": "",
    "text": "$$\n\\newcommand{\\trans}{^\\mathsf{T}} \n\\newcommand{\\eps}{\\epsilon}\n$$\n\n\n\nThis is an example of using qmd as the source document.\nAn example of an evaluated Python code chunk.\n\n\nCode\nimport numpy as np\nnp.mean(np.random.normal(size=100))\n\n\n-0.06841232200621428\n\n\n\\[\n\\theta = \\int_0^\\infty f(x,\\theta)d\\theta\n\\]\nUse a \\(\\LaTeX\\) macro. (Note: need to look back at this as having include-before-body in the yaml causes extra space at top of page.)\n\\[\nA = X \\trans Y\n\\]\nAn example of adding a styled div via html.\n\nThis content can be styled via the border class.\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\nHere’s a tabset\n\nRPython\n\n\nfizz_buzz &lt;- function(fbnums = 1:50) {\n  output &lt;- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\nfizz_buzz(3)\n\n\n\n\nCode\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n    \nfizz_buzz(3)\n\n\nFizz"
  },
  {
    "objectID": "unit3.html",
    "href": "unit3.html",
    "title": "Unit 3: more",
    "section": "",
    "text": "$$\n\\newcommand{\\trans}{^\\mathsf{T}} \n\\newcommand{\\eps}{\\epsilon}\n$$\n\n\n\nThis is an example of using qmd as the source document with pdf as one target. I’ve taken out the qmd stuff that doesn’t seem to render to pdf.\nAn example of an evaluated Python code chunk.\n\n\nCode\nimport numpy as np\nnp.mean(np.random.normal(size=100))\n\n\n0.0779802879353334\n\n\n\\[\n\\theta = \\int_0^\\infty f(x,\\theta)d\\theta\n\\]\n(Note: need to look back at this as having include-before-body in the yaml causes extra space at top of page.)\n\\[\nA = X \\trans Y\n\\]"
  },
  {
    "objectID": "calendar.html",
    "href": "calendar.html",
    "title": "Calendar",
    "section": "",
    "text": "We can just embed the iframe html:"
  }
]